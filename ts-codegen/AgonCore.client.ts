/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.23.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, ModuleInstantiateInfo, ExecuteMsg, QueryMsg, MigrateMsg, AdminResponse, Addr, CompetitionModulesResponse, CompetitionModuleResponse, Uint128, DumpStateResponse, UserRecordResponse } from "./AgonCore.types";
export interface AgonCoreReadOnlyInterface {
  contractAddress: string;
  competitionModules: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<CompetitionModulesResponse>;
  userRecord: ({
    addr
  }: {
    addr: string;
  }) => Promise<UserRecordResponse>;
  admin: () => Promise<AdminResponse>;
  dumpState: ({
    addr
  }: {
    addr: string;
  }) => Promise<DumpStateResponse>;
}
export class AgonCoreQueryClient implements AgonCoreReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.competitionModules = this.competitionModules.bind(this);
    this.userRecord = this.userRecord.bind(this);
    this.admin = this.admin.bind(this);
    this.dumpState = this.dumpState.bind(this);
  }

  competitionModules = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<CompetitionModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      competition_modules: {
        limit,
        start_after: startAfter
      }
    });
  };
  userRecord = async ({
    addr
  }: {
    addr: string;
  }): Promise<UserRecordResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_record: {
        addr
      }
    });
  };
  admin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  dumpState = async ({
    addr
  }: {
    addr: string;
  }): Promise<DumpStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dump_state: {
        addr
      }
    });
  };
}
export interface AgonCoreInterface extends AgonCoreReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateCompetitionModules: ({
    toAdd,
    toDisable
  }: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmin: ({
    admin
  }: {
    admin?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateRecord: ({
    msg,
    token
  }: {
    msg: Binary;
    token: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AgonCoreClient extends AgonCoreQueryClient implements AgonCoreInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateCompetitionModules = this.updateCompetitionModules.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
    this.updateRecord = this.updateRecord.bind(this);
  }

  updateCompetitionModules = async ({
    toAdd,
    toDisable
  }: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_competition_modules: {
        to_add: toAdd,
        to_disable: toDisable
      }
    }, fee, memo, funds);
  };
  updateAdmin = async ({
    admin
  }: {
    admin?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        admin
      }
    }, fee, memo, funds);
  };
  updateRecord = async ({
    msg,
    token
  }: {
    msg: Binary;
    token: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_record: {
        msg,
        token
      }
    }, fee, memo, funds);
  };
}
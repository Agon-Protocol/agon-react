/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Admin, Binary, InstantiateMsg, ModuleInstantiateInfo, Ruleset, ExecuteMsg, Uint128, Expiration, Timestamp, Uint64, Addr, GenericTokenType, WagerDAO, MemberBalance, GenericTokenBalance, MemberShare, QueryMsg, MigrateMsg, ArrayOfCompetitionModule, CompetitionModule, DumpStateResponse, ArrayOfRuleset, Decimal } from "./AgonCore.types";
export interface AgonCoreReadOnlyInterface {
  contractAddress: string;
  competitionModules: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfCompetitionModule>;
  rulesets: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<ArrayOfRuleset>;
  dAO: () => Promise<Addr>;
  tax: ({
    height
  }: {
    height?: number;
  }) => Promise<Decimal>;
  dumpState: () => Promise<DumpStateResponse>;
}
export class AgonCoreQueryClient implements AgonCoreReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.competitionModules = this.competitionModules.bind(this);
    this.rulesets = this.rulesets.bind(this);
    this.dAO = this.dAO.bind(this);
    this.tax = this.tax.bind(this);
    this.dumpState = this.dumpState.bind(this);
  }

  competitionModules = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfCompetitionModule> => {
    return this.client.queryContractSmart(this.contractAddress, {
      competition_modules: {
        limit,
        start_after: startAfter
      }
    });
  };
  rulesets = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<ArrayOfRuleset> => {
    return this.client.queryContractSmart(this.contractAddress, {
      rulesets: {
        limit,
        start_after: startAfter
      }
    });
  };
  dAO = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      d_a_o: {}
    });
  };
  tax = async ({
    height
  }: {
    height?: number;
  }): Promise<Decimal> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tax: {
        height
      }
    });
  };
  dumpState = async (): Promise<DumpStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dump_state: {}
    });
  };
}
export interface AgonCoreInterface extends AgonCoreReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateCompetitionModules: ({
    toAdd,
    toDisable
  }: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  jailWager: ({
    id
  }: {
    id: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createWager: ({
    escrowCodeId,
    expiration,
    rules,
    ruleset,
    stake,
    wagerAmount,
    wagerDao
  }: {
    escrowCodeId: number;
    expiration: Expiration;
    rules: string[];
    ruleset?: Uint128;
    stake: MemberBalance[];
    wagerAmount: MemberBalance[];
    wagerDao: WagerDAO;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  handleWager: ({
    distribution,
    id
  }: {
    distribution?: MemberShare[];
    id: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateRulesets: ({
    toAdd,
    toDisable
  }: {
    toAdd: Ruleset[];
    toDisable: Uint128[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AgonCoreClient extends AgonCoreQueryClient implements AgonCoreInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateCompetitionModules = this.updateCompetitionModules.bind(this);
    this.jailWager = this.jailWager.bind(this);
    this.createWager = this.createWager.bind(this);
    this.handleWager = this.handleWager.bind(this);
    this.updateRulesets = this.updateRulesets.bind(this);
  }

  updateCompetitionModules = async ({
    toAdd,
    toDisable
  }: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_competition_modules: {
        to_add: toAdd,
        to_disable: toDisable
      }
    }, fee, memo, funds);
  };
  jailWager = async ({
    id
  }: {
    id: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      jail_wager: {
        id
      }
    }, fee, memo, funds);
  };
  createWager = async ({
    escrowCodeId,
    expiration,
    rules,
    ruleset,
    stake,
    wagerAmount,
    wagerDao
  }: {
    escrowCodeId: number;
    expiration: Expiration;
    rules: string[];
    ruleset?: Uint128;
    stake: MemberBalance[];
    wagerAmount: MemberBalance[];
    wagerDao: WagerDAO;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_wager: {
        escrow_code_id: escrowCodeId,
        expiration,
        rules,
        ruleset,
        stake,
        wager_amount: wagerAmount,
        wager_dao: wagerDao
      }
    }, fee, memo, funds);
  };
  handleWager = async ({
    distribution,
    id
  }: {
    distribution?: MemberShare[];
    id: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      handle_wager: {
        distribution,
        id
      }
    }, fee, memo, funds);
  };
  updateRulesets = async ({
    toAdd,
    toDisable
  }: {
    toAdd: Ruleset[];
    toDisable: Uint128[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_rulesets: {
        to_add: toAdd,
        to_disable: toDisable
      }
    }, fee, memo, funds);
  };
}
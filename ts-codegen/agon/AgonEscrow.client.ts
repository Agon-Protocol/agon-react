/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, GenericTokenType, InstantiateMsg, MemberBalance, GenericTokenBalance, ExecuteMsg, Binary, CompetitionState, Cw20ReceiveMsg, Cw721ReceiveMsg, CwCompetitionResultMsg, MemberShare, CwCompetitionStateChangedMsg, QueryMsg, MigrateMsg, ArrayOfGenericTokenBalance } from "./AgonEscrow.types";
export interface AgonEscrowReadOnlyInterface {
  contractAddress: string;
  balance: ({
    member
  }: {
    member: string;
  }) => Promise<ArrayOfGenericTokenBalance>;
  due: ({
    member
  }: {
    member: string;
  }) => Promise<ArrayOfGenericTokenBalance>;
  total: () => Promise<ArrayOfGenericTokenBalance>;
}
export class AgonEscrowQueryClient implements AgonEscrowReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.balance = this.balance.bind(this);
    this.due = this.due.bind(this);
    this.total = this.total.bind(this);
  }

  balance = async ({
    member
  }: {
    member: string;
  }): Promise<ArrayOfGenericTokenBalance> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {
        member
      }
    });
  };
  due = async ({
    member
  }: {
    member: string;
  }): Promise<ArrayOfGenericTokenBalance> => {
    return this.client.queryContractSmart(this.contractAddress, {
      due: {
        member
      }
    });
  };
  total = async (): Promise<ArrayOfGenericTokenBalance> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total: {}
    });
  };
}
export interface AgonEscrowInterface extends AgonEscrowReadOnlyInterface {
  contractAddress: string;
  sender: string;
  refund: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receiveNative: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  handleCompetitionResult: ({
    distribution
  }: {
    distribution?: MemberShare[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  handleCompetitionStateChanged: ({
    newState,
    oldState
  }: {
    newState: CompetitionState;
    oldState: CompetitionState;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AgonEscrowClient extends AgonEscrowQueryClient implements AgonEscrowInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.refund = this.refund.bind(this);
    this.receiveNative = this.receiveNative.bind(this);
    this.receive = this.receive.bind(this);
    this.receiveNft = this.receiveNft.bind(this);
    this.handleCompetitionResult = this.handleCompetitionResult.bind(this);
    this.handleCompetitionStateChanged = this.handleCompetitionStateChanged.bind(this);
  }

  refund = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      refund: {}
    }, fee, memo, funds);
  };
  receiveNative = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_native: {}
    }, fee, memo, funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  handleCompetitionResult = async ({
    distribution
  }: {
    distribution?: MemberShare[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      handle_competition_result: {
        distribution
      }
    }, fee, memo, funds);
  };
  handleCompetitionStateChanged = async ({
    newState,
    oldState
  }: {
    newState: CompetitionState;
    oldState: CompetitionState;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      handle_competition_state_changed: {
        new_state: newState,
        old_state: oldState
      }
    }, fee, memo, funds);
  };
}